'From MIT Squeak 0.9.4 (June 1, 2003) [No updates present.] on 8 May 2015 at 8:35:40 pm'!"Change Set:		mugbot-1.0Date:			8 May 2015Author:			Manabu Sugiura"!Object subclass: #Json	instanceVariableNames: 'stream '	classVariableNames: 'CharacterEscapeMap '	poolDictionaries: ''	category: 'JSON'!!Json commentStamp: '<historical>' prior: 0!This class reads and writes JSON format data - strings, numbers, boolean, nil, arrays and dictionaries. See http://www.crockford.com/JSON/index.html.!Json class	instanceVariableNames: ''!Object subclass: #MugbotCommand	instanceVariableNames: 'selector args duration '	classVariableNames: ''	poolDictionaries: ''	category: 'Mugbot'!Object subclass: #MugbotSocketAdapter	instanceVariableNames: 'ip port online socket sprite commandThread commandPool commandLock sensorThread '	classVariableNames: ''	poolDictionaries: ''	category: 'Mugbot'!Morph subclass: #ScratchFrameMorph	instanceVariableNames: 'topPane viewerPane scriptsPane stageFrame workPane titlePane libraryPane menuPanel stageButtonsPanel readoutPane logoMorph projectTitleMorph flagButton fillScreenFlag paintingInProgress projectDirectory projectName projectInfo author loginName loginPassword watcherPositions shuffledCostumeNames justSaved viewModeButtons viewMode lastViewMode viewModeButtonsPanel toolbarPanel lastWeDoPoll '	classVariableNames: 'Build Clipboard DefaultNotes DefaultSprite Fonts FontsXO IsXO ScratchServers ScratchSkin ScratchSkinXO TakeOverScreen UseErrorCatcher Version VersionDate VisibleDrives WorkpaneExtent AppName '	poolDictionaries: ''	category: 'Scratch-UI-Panes'!ScratchSpriteMorph subclass: #MugbotSpriteMorph	instanceVariableNames: 'adapter motionPool motionThread motionLock faceX faceY '	classVariableNames: ''	poolDictionaries: ''	category: 'Mugbot'!MugbotSpriteMorph class	instanceVariableNames: ''!!Dictionary methodsFor: '*JSON-writing' stamp: 'tonyg 8/17/2005 00:33'!jsonWriteOn: aStream	| needComma |	needComma _ false.	aStream nextPut: ${.	self keysAndValuesDo: [:k :v |		needComma			ifTrue: [ aStream nextPutAll: ', ' ]			ifFalse: [ needComma _ true ].		k asString jsonWriteOn: aStream.		aStream nextPutAll: ': '.		v jsonWriteOn: aStream.	].	aStream nextPut: $}.! !!False methodsFor: '*JSON-writing' stamp: 'tonyg 8/17/2005 00:43'!jsonWriteOn: aStream	aStream nextPutAll: 'false'! !!Json methodsFor: 'private' stamp: 'tonyg 8/16/2005 23:41'!consume: aString returning: anObject	aString do: [:c | self next == c ifFalse: [JsonSyntaxError signal: 'Expected ''', aString, ''''] ].	^ anObject! !!Json methodsFor: 'private' stamp: 'tonyg 8/16/2005 21:08'!interpretStringEscape	| c |	c := self next.	c == $b ifTrue: [^ Character backspace].	c == $n ifTrue: [^ Character lf].	c == $f ifTrue: [^ Character newPage].	c == $r ifTrue: [^ Character cr].	c == $t ifTrue: [^ Character tab].	^ c.! !!Json methodsFor: 'private' stamp: 'tonyg 8/16/2005 20:22'!next	^ self stream next! !!Json methodsFor: 'private' stamp: 'tonyg 8/16/2005 20:21'!peek	^ self stream peek! !!Json methodsFor: 'private'!readArray	| a needComma |	a _ OrderedCollection new.	needComma _ false.	[true]		whileTrue: 			[self skipWhitespace.			self peek == $]				ifTrue: 					[self next.					^ a asArray].			needComma				ifTrue: 					[self peek == $, ifFalse: [JsonSyntaxError signal: 'Missing comma'].					self next]				ifFalse: [needComma _ true].			a add: self readAny]! !!Json methodsFor: 'private'!readDictionary	| m k v needComma |	m _ Dictionary new.	needComma _ false.	[true]		whileTrue: 			[self skipWhitespace.			self peek == $}				ifTrue: 					[self next.					^ m].			needComma				ifTrue: 					[self peek == $, ifFalse: [JsonSyntaxError signal: 'Missing comma'].					self next.					self skipWhitespace]				ifFalse: [needComma _ true].			self next == $" ifFalse: [JsonSyntaxError signal: 'Key in dictionary must be string'].			k _ self readString.			self skipWhitespace.			self peek == $: ifFalse: [JsonSyntaxError signal: 'Missing colon'].			self next.			v _ self readAny.			m at: k put: v]! !!Json methodsFor: 'private' stamp: 'ms 6/27/2011 19:08'!readNumber	| acc c |	acc _ WriteStream on: ''.	[true]		whileTrue: 			[c _ self peek.			(c isNil not and: [Json numbersMayContain: c])				ifFalse: [^ acc contents asNumber].						"on: JsonSyntaxError do: [JsonSyntaxError signal: 'Invalid number']]."			acc nextPut: c.			self next]! !!Json methodsFor: 'private'!readString	| s c |	s _ WriteStream on: ''.	[true]		whileTrue: 			[c _ self next.			c == $\				ifTrue: [s nextPut: self interpretStringEscape]				ifFalse: 					[c == $" ifTrue: [^ s contents].					s nextPut: c]]! !!Json methodsFor: 'private' stamp: 'tonyg 8/16/2005 20:32'!skipComment	self peek == $/ ifTrue: [		self next.		self peek == $/			ifTrue: [self skipToEndOfLine]			ifFalse: [self peek == $*						ifTrue: [self next. self skipCommentBody]						ifFalse: [JsonSyntaxError signal: 'Invalid comment syntax']]]! !!Json methodsFor: 'private' stamp: 'tonyg 8/17/2005 00:19'!skipCommentBody	[		[self next == $*] whileFalse.		self peek == $/	] whileFalse.	self next. "skip that last slash"	self skipWhitespace.! !!Json methodsFor: 'private' stamp: 'tonyg 8/16/2005 20:35'!skipToEndOfLine	[self peek == Character cr or: [self peek == Character lf]] whileFalse: [self next].	self skipWhitespace! !!Json methodsFor: 'private' stamp: 'tonyg 8/16/2005 20:24'!skipWhitespace	[self peek isSeparator] whileTrue: [self next].	self skipComment.! !!Json methodsFor: 'parsing' stamp: 'ms 6/27/2011 19:07'!readAny	"This is the main entry point for the JSON parser. See also readFrom: on the class side."	| c |	self skipWhitespace.	c := self peek asLowercase.	c == ${ ifTrue: [self next. ^ self readDictionary].	c == $[ ifTrue: [self next. ^ self readArray].	c == $" ifTrue: [self next. ^ self readString].	c == $t ifTrue: [^ self consume: 'true' returning: true].	c == $f ifTrue: [^ self consume: 'false' returning: false].	c == $n ifTrue: [^ self consume: 'null' returning: nil].	(Json numbersMayContain: c) ifTrue: [^ self readNumber].	"JsonSyntaxError signal: 'Unknown Json input'"! !!Json methodsFor: 'accessing' stamp: 'tonyg 8/16/2005 20:20'!stream	"Answer the value of stream"	^ stream! !!Json methodsFor: 'accessing' stamp: 'tonyg 8/16/2005 20:20'!stream: anObject	"Set the value of stream"	stream _ anObject! !!Json class methodsFor: 'as yet unclassified' stamp: 'tonyg 8/17/2005 16:20'!escapeForCharacter: c	^ CharacterEscapeMap at: c ifAbsent: [nil]! !!Json class methodsFor: 'as yet unclassified' stamp: 'tonyg 8/17/2005 16:19'!initialize	"Json initialize."	CharacterEscapeMap := Dictionary newFrom: {		$" -> $".		$\ -> $\.		Character backspace -> $b.		Character lf -> $n.		Character newPage -> $f.		Character cr -> $r.		Character tab -> $t.	}.! !!Json class methodsFor: 'as yet unclassified' stamp: 'tonyg 8/17/2005 09:09'!numbersMayContain: aChar	^ aChar isDigit or: [#($- $+ $. $e $E) includes: aChar]! !!Json class methodsFor: 'as yet unclassified' stamp: 'tonyg 8/16/2005 20:19'!readFrom: aStream	^ self new stream: aStream; readAny.! !!Json class methodsFor: 'as yet unclassified' stamp: 'tonyg 8/17/2005 07:45'!render: anObject	| s |	s := WriteStream on: String new.	anObject jsonWriteOn: s.	^ s contents.! !!MugbotCommand methodsFor: 'as yet unclassified' stamp: 'ms 6/18/2011 18:14'!args	^ args! !!MugbotCommand methodsFor: 'as yet unclassified' stamp: 'ms 6/18/2011 18:12'!args: newArgs	args _ newArgs.! !!MugbotCommand methodsFor: 'as yet unclassified' stamp: 'ms 6/18/2011 18:14'!duration	^ duration! !!MugbotCommand methodsFor: 'as yet unclassified' stamp: 'ms 6/18/2011 18:13'!duration: newDuration	duration _ newDuration.! !!MugbotCommand methodsFor: 'as yet unclassified' stamp: 'ms 6/20/2011 02:47'!fieldsVersion	^ 1! !!MugbotCommand methodsFor: 'as yet unclassified' stamp: 'ms 5/7/2014 22:14'!initFieldsFrom: anObjStream version: classVersion	self initFieldsNamed: #(		selector args duration	) from: anObjStream.! !!MugbotCommand methodsFor: 'as yet unclassified' stamp: 'ms 6/18/2011 18:14'!selector	^ selector! !!MugbotCommand methodsFor: 'as yet unclassified' stamp: 'ms 6/18/2011 18:13'!selector: newSelector	selector _ newSelector.! !!MugbotCommand methodsFor: 'as yet unclassified' stamp: 'ms 6/20/2011 03:00'!storeFieldsOn: anObjStream	self storeFieldsNamed: #(		selector args duration	) on: anObjStream.! !!MugbotSocketAdapter methodsFor: 'as yet unclassified' stamp: 'ms 6/18/2011 22:13'!clearAllThread	Smalltalk reclaimDependents.	SystemWindow clearTopWindow.	Smalltalk forgetDoIts.	Smalltalk garbageCollect.	Process allInstances.	PreDebugWindow allInstances do: [:d | d model: nil].	Debugger allInstances do: [:d | d windowIsClosing].	Process allInstances do: 		[:p | 		p suspendedContext asString = 'UndefinedObject>>DoIt' ifTrue: [p terminate].		p suspendedContext asString = 'Semaphore>>waitTimeoutMSecs:' ifTrue: [p terminate].		p suspendedContext asString = 'Semaphore>>waitTimeoutMSecs' ifTrue: [p terminate].		p suspendedContext asString = 'Delay>>wait' ifTrue: [p terminate]].! !!MugbotSocketAdapter methodsFor: 'as yet unclassified' stamp: 'ms 6/27/2011 01:20'!closeSocket	socket closeAndDestroy.	self clearAllThread.! !!MugbotSocketAdapter methodsFor: 'as yet unclassified' stamp: 'ms 5/1/2014 19:42'!createMugbotCtrlJSON: action arg: anArg	| json |	json _ '{"action":"',action,'","arg":"',anArg asString,'"}'.	^ json! !!MugbotSocketAdapter methodsFor: 'as yet unclassified' stamp: 'ms 5/4/2015 21:17'!createSocket	| host |	Socket initializeNetwork.	socket _ SimpleClientSocket new." newTCP"		ip _ StringDialog ask: 'Input Mugbot address' initialAnswer: '192.168.xx.xx'.	host _ NetNameResolver addressForName: ip timeout: 10.	host = nil ifTrue: [		^ self inform: 'Could not find an address for ', ip.	].	socket connectTo: host port: port.	socket waitForConnectionUntil: (Socket deadlineSecs: 3).	(socket isConnected) ifFalse: [ 		DialogBoxMorph warn: (('Could not connect mugbot ' localized) , ip).		^ nil.	].		! !!MugbotSocketAdapter methodsFor: 'as yet unclassified' stamp: 'ms 6/20/2011 02:48'!fieldsVersion	^ 1! !!MugbotSocketAdapter methodsFor: 'as yet unclassified' stamp: 'ms 5/7/2014 22:14'!initFieldsFrom: anObjStream version: classVersion	self initFieldsNamed: #(		ip port	) from: anObjStream.! !!MugbotSocketAdapter methodsFor: 'as yet unclassified' stamp: 'ms 5/7/2014 22:37'!initialize	port _ 51234.	self createSocket.	commandPool _  SharedQueue new.	commandLock _ false.	self startCommandThread.	! !!MugbotSocketAdapter methodsFor: 'as yet unclassified' stamp: 'ms 5/6/2014 00:47'!isConnected	^ socket isConnected.! !!MugbotSocketAdapter methodsFor: 'as yet unclassified' stamp: 'ms 5/1/2014 18:23'!send: command	| block |	(self isConnected = false or:[ online = false] ) ifTrue: [^self].	block _ 	[		commandLock _ true.				self sendInternal: command.		command duration ifNotNil:[			(Delay forMilliseconds: command duration) wait.		].		commandLock _ false.	].	commandPool nextPut: block.! !!MugbotSocketAdapter methodsFor: 'as yet unclassified' stamp: 'ms 5/4/2015 22:35'!sendInternal: command	| json selector args faceX turnArg faceY speechArg |	selector _ command selector.	args _ command args.	selector = #mugbotFaceReset ifTrue:[		json _  self createMugbotCtrlJSON:'face_x' arg:0.		self sendJSONPacket: json.		json _  self createMugbotCtrlJSON:'face_y' arg:0.		self sendJSONPacket: json.		^ self	].	selector = #mugbotSetFaceRight: ifTrue:[		json _  self createMugbotCtrlJSON:'face_x' arg:(args at:1).	].	selector = #mugbotTurnFaceRight: ifTrue:[		turnArg _ args at:1.		faceX _   sprite faceX + turnArg.		json _  self createMugbotCtrlJSON:'face_x' arg:faceX.	].	selector = #mugbotSetFaceLeft: ifTrue:[		json _  self createMugbotCtrlJSON:'face_x' arg:(args at:1 ).	].	selector = #mugbotTurnFaceLeft: ifTrue:[		turnArg _ args at:1.		faceX _   sprite faceX + turnArg.		json _  self createMugbotCtrlJSON:'face_x' arg:faceX.	].	selector = #mugbotSetFaceUp: ifTrue:[		json _  self createMugbotCtrlJSON:'face_y' arg:(args at:1 ).	].	selector = #mugbotTurnFaceUp: ifTrue:[		turnArg _ args at:1.		faceY _   sprite faceY + turnArg.		json _  self createMugbotCtrlJSON:'face_y' arg:faceY.	].		selector = #mugbotSetFaceDown: ifTrue:[		json _  self createMugbotCtrlJSON:'face_y' arg:(args at:1 ).	].	selector = #mugbotTurnFaceDown: ifTrue:[		turnArg _ args at:1.		faceY _   (sprite faceY) + turnArg.		json _  self createMugbotCtrlJSON:'face_y' arg:faceY.	].	selector = #mugbotSpeech: ifTrue:[		speechArg _ args at:1.		json _  self createMugbotCtrlJSON:'speech' arg: speechArg.	].	selector = #mugbotSetEyesBrightness: ifTrue:[		json _  self createMugbotCtrlJSON:'eye' arg:(args at:1 ).		self sendJSONPacket: json.		^ self	].	self sendJSONPacket: json.! !!MugbotSocketAdapter methodsFor: 'as yet unclassified' stamp: 'ms 5/6/2014 00:53'!sendJSONPacket: JSON	(self isConnected = false) ifTrue: [^ self].	socket sendData: JSON, String crlf.! !!MugbotSocketAdapter methodsFor: 'as yet unclassified' stamp: 'ms 6/20/2011 19:40'!sprite: aSprite	sprite _ aSprite.! !!MugbotSocketAdapter methodsFor: 'as yet unclassified' stamp: 'ms 5/6/2014 00:45'!startCommandThread	| command |	commandThread _ [		[			commandLock ifFalse:[			(commandPool peek) ifNotNil:[				command _ commandPool next.				command forkAt: Processor userBackgroundPriority.					].		].		(Delay forMilliseconds: 10 asInteger) wait.		true] whileTrue.	] newProcess.	commandThread priority: Processor userBackgroundPriority.	commandThread resume.! !!MugbotSocketAdapter methodsFor: 'as yet unclassified' stamp: 'ms 6/18/2011 19:05'!stopCommandThread	(commandThread isKindOf: Process)		ifTrue: [ commandThread terminate.].	commandThread _ nil.! !!MugbotSocketAdapter methodsFor: 'as yet unclassified' stamp: 'ms 5/7/2014 22:14'!storeFieldsOn: anObjStream	"super storeFieldsOn: anObjStream."	self storeFieldsNamed: #(		ip port	) on: anObjStream.! !!Number methodsFor: '*JSON-writing' stamp: 'tonyg 8/17/2005 00:41'!jsonWriteOn: aWriteStream 	aWriteStream nextPutAll: self asString.! !!ObjStream class methodsFor: 'class initialization' stamp: 'ms 5/7/2014 22:29'!userClasses	"Answer an array of (<class id>, <class name>) records for all version numbered user classes."	"The following finds obsolete user classes:"	"self initialize. self userClasses reject: [:rec | Smalltalk includesKey: rec second]"	^ #(		"id		class"		(100		Morph)		(101		BorderedMorph)		(102		RectangleMorph)		(103		EllipseMorph)		(104		AlignmentMorph)		(105		StringMorph)		(106		UpdatingStringMorph)		(107		SimpleSliderMorph)		(108		SimpleButtonMorph)		(109		SampledSound)		(110		ImageMorph)		(111		SketchMorph)		"(120	SpriteMorph)"		"(121		SoundMorph)"		"(122	ImageBoxMorph)"		(123		SensorBoardMorph)		(124		ScratchSpriteMorph)		(125		ScratchStageMorph)		(140		ChoiceArgMorph)		(141		ColorArgMorph)		(142		ExpressionArgMorph)		"(143	ParameterReferenceMorph)"		"(144	PositionArgMorph)"		(145		SpriteArgMorph)		"(146	VariableArgMorph)"		(147		BlockMorph)		(148		CommandBlockMorph)		(149		CBlockMorph)		"(150	MethodCallBlockMorph)"		(151		HatBlockMorph)		"(152	ScratchButtonMorph)"		(153		ScratchScriptsMorph)		(154		ScratchSliderMorph)		(155		WatcherMorph)		"(156	ParameterMorph)"		(157		SetterBlockMorph)		(158		EventHatMorph)		"(159	EventArgMorph)"		(160		VariableBlockMorph)		"(161		IACTHatBlock)"		(162		ImageMedia)		(163		MovieMedia)		(164		SoundMedia)		(165		KeyEventHatMorph)		(166		BooleanArgMorph)		(167		EventTitleMorph)		(168		MouseClickEventHatMorph)		(169		ExpressionArgMorphWithMenu)		(170		ReporterBlockMorph)		(171		MultilineStringMorph)		(172		ToggleButton)		(173		WatcherReadoutFrameMorph)		(174		WatcherSliderMorph)		(175		ScratchListMorph)		(176		ScrollingStringMorph)		(177		MugbotSpriteMorph)		(178		MugbotSocketAdapter)		(179		MugbotCommand)		(180		SimpleClientSocket)		(181		Process)		(182		SharedQueue)	)! !!ScratchCameraDialog methodsFor: 'accessing' stamp: 'ms 6/20/2011 03:35'!openCamera	| desiredExtent |	desiredExtent _ 320@240.	(CameraPlugin openCamera: 1 width: desiredExtent x height: desiredExtent y) ifNotNil: [		CameraPlugin waitForCameraStart.		frameForm _ Form extent: (CameraPlugin frameExtent: 1) depth: 32].	viewFinderMorph form: (Form extent: 320@240 depth: 32) fillBlack.	self step.	self extent: self extent.	"(w _ self world) ifNotNil: [w activeHand newKeyboardFocus: self]."! !!ScratchCameraDialog methodsFor: 'stepping' stamp: 'ms 6/20/2011 03:36'!step	| n outF |	"(w _ self world) ifNotNil: [w activeHand newKeyboardFocus: self]."	frameForm ifNil: [^ self].	n _ CameraPlugin getFrameForCamera: 1 into: frameForm bits.	n > 0 ifTrue: [		outF _ viewFinderMorph form.		(WarpBlt toForm: outF)			sourceForm: frameForm;			cellSize: 1;  "installs a new colormap if cellSize > 1"			combinationRule: Form over;			copyQuad: frameForm boundingBox innerCorners toRect: outF boundingBox.		viewFinderMorph changed].! !!ScratchFrameMorph methodsFor: 'menu/button actions' stamp: 'ms 9/8/2014 19:39'!aboutMugbotApplication	| dialogBox |	dialogBox _ DialogBoxMorph new		title: 'About ', AppName;		withButtonsForYes: false no: false okay: true cancel: false.	dialogBox message: AppName , ' v ' ,Version , ' ', Build ,		'http://www.mugbot.comKoike Lab - Tokyo City University       Sugiura Lab - Yamanashi Eiwa CollegeBased on Scratch from the MIT Media Lab'		font: (ScratchFrameMorph getFont: #AboutScratch).	dialogBox getUserResponse.! !!ScratchFrameMorph methodsFor: 'menu/button actions' stamp: 'ms 9/8/2014 19:40'!helpMenu: aMenuTitleMorph	| menu |	menu _ CustomMenu new.	menu add: 'Mugbot Page' action: #launchMugbotPage.	menu add: 'About ', AppName action: #aboutMugbotApplication.	menu addLine.	menu add: 'Scratch Help Page' action: #launchHelpPage.	menu add: 'Scratch Help Screens' action: #launchAllHelpScreens.	menu add: 'About Scratch' action: #aboutScratch.	menu localize.	#(1 3 4) do: [:n |		menu labels at: n put:			((menu labels at: n) copyFrom: 1 to: (menu labels at: n) size - 1), ScratchTranslator ellipsesSuffix].	menu invokeOn: self at: aMenuTitleMorph bottomLeft + (0@10).! !!ScratchFrameMorph methodsFor: 'menu/button actions' stamp: 'ms 9/10/2014 23:13'!launchMugbotPage	self world displayWorldSafely.	Cursor wait showWhile: [ScratchPlugin primOpenURL: 'http://www.mugbot.com/'].! !!ScratchFrameMorph methodsFor: 'menu/button actions' stamp: 'ms 6/19/2011 23:44'!newScratchProject	"Make a new, blank Scratch project."	| response newProject sprite |	self closeMediaEditorsAndDialogs ifFalse: [^ self].	self stopAll.	(justSaved or: [self projectIsEmpty]) ifFalse: [		"ask the user if they want to save the current project"		response _ DialogBoxMorph askWithCancel: 'Save the current project?'.		response = #cancelled ifTrue: [^ self].		response ifTrue: [self saveScratchProjectNoDialog.			justSaved ifFalse: [^ self]]].	projectDirectory _ ScratchFileChooserDialog getDefaultFolderForType: #project.	projectName _ ''.	projectInfo _ Dictionary new.	newProject _ ScratchStageMorph new.	sprite _ ScratchFrameMorph defaultSprite fullCopy.	sprite position: (241@181) - sprite extent.	"newProject addMorph: sprite."	self installNewProject: newProject.	self initializeWatcherPositions.	justSaved _ true.	"self enterNormalMode."! !!ScratchFrameMorph methodsFor: 'private' stamp: 'ms 9/8/2014 17:41'!updateProjectName	"Update the project name display in the Scratch title bar."	| s |	projectName ifNil: [projectName _ ''].	projectTitleMorph contents: (self nameFromFileName: projectName).	projectTitleMorph contents size > 0		ifTrue: [s _ projectTitleMorph contents, '-', AppName]		ifFalse: [s _ AppName, ' ', Version].	ScratchPlugin primSetWindowTitle: s.	self fixLayout.! !!ScratchFrameMorph class methodsFor: 'class initialization' stamp: 'ms 6/20/2011 02:53'!initialize	"self initialize"	Clipboard _ nil.	WorkpaneExtent _ 480@360.	UseErrorCatcher _ false.	DefaultNotes _ ''.	self initFonts.! !!ScratchFrameMorph class methodsFor: 'utilities' stamp: 'ms 9/8/2014 17:39'!appName	^ AppName! !!ScratchFrameMorph class methodsFor: 'utilities' stamp: 'ms 9/8/2014 17:40'!appName: aString	AppName _ aString.! !!ScratchFrameMorph class methodsFor: 'utilities' stamp: 'ms 9/8/2014 17:24'!build	^ Build! !!ScratchFrameMorph class methodsFor: 'utilities' stamp: 'ms 9/8/2014 17:25'!build: aString	Build _ aString.! !!ScratchFrameMorph class methodsFor: 'utilities' stamp: 'ms 9/8/2014 17:32'!initializeMugbotLogo	ScratchSkin at: #scratchLogo put: (Form fromFileNamed: 'logo.png').! !!ScratchFrameMorph class methodsFor: 'utilities' stamp: 'ms 9/8/2014 17:25'!version: aString	Version _ aString.	VersionDate _ Date today printFormat: #(3 2 1 $- 1 1).! !!ScratchProcess methodsFor: 'private-evaluation' stamp: 'ms 5/4/2015 22:19'!applyTimedCommand	"Applies the current command to the already evaluated list of arguments over a particular time interval."	| block arguments currentTime startTime args totalMSecs elapsedMSecs |	block _ stackFrame expression.	arguments _ stackFrame arguments.		"Do we still need to evaluate more arguments?"	arguments size < block argumentCount ifTrue: [^ self evaluateNextArgument].	arguments _ block coerceArgs: arguments.	"Record or get the time when command was first invoked."	currentTime _ Time millisecondClockValue.	startTime _ stackFrame startTime.	startTime ifNil: [  "first call; just set starting time and value"		((((((((((block selector = #mugbotSetFaceRight:) 		or: [block selector = #mugbotSetFaceLeft:])		or: [block selector = #mugbotTurnFaceRight:])		or: [block selector = #mugbotTurnFaceLeft:]) 		or: [block selector = #mugbotSetFaceUp:]) 		or: [block selector = #mugbotTurnFaceUp:])		or: [block selector = #mugbotSetFaceDown:]) 		or: [block selector = #mugbotTurnFaceDown:])		or: [block selector = #mugbotSetEyesBrightness:])		or: [block selector = #mugbotSpeech:]) ifTrue: [			args _ arguments asArray.		] ifFalse:[			args _ arguments asArray, (Array with: 0 with: nil).		].		stackFrame startValue: (block receiver perform: block selector withArguments: args).		stackFrame startTime: currentTime.		readyToYield _ true.		^ self].	"Call primitive time command with its arguments and the elapsed time in seconds"	arguments last isNumber ifTrue:[		totalMSecs _ arguments last * 1000.	].	block selector = #glideSecs:toX:y:elapsed:from: ifTrue: [totalMSecs _ arguments first * 1000].	block selector = #mwait:elapsed:from: ifTrue: [totalMSecs _ arguments last].	((block selector = #drum:duration:elapsed:from:) or:	 [block selector = #noteOn:duration:elapsed:from:])		ifTrue: [totalMSecs _ (60000 * arguments second) / block receiver tempo].	block selector = #rest:elapsed:from:		ifTrue: [totalMSecs _ (60000 * arguments first) / block receiver tempo].	((((((((((block selector = #mugbotSetFaceRight:) 		or: [block selector = #mugbotSetFaceLeft:])		or: [block selector = #mugbotTurnFaceRight:])		or: [block selector = #mugbotTurnFaceLeft:]) 		or: [block selector = #mugbotSetFaceUp:])		or: [block selector = #mugbotTurnFaceUp:]) 		or: [block selector = #mugbotSetFaceDown:])		or: [block selector = #mugbotTurnFaceDown:]) 		or: [block selector = #mugbotSetEyesBrightness:])		or: [block selector = #mugbotSpeech:]) ifTrue: [		totalMSecs _ block receiver getTotalMSecs: (block selector) args: arguments. 	].	block selector = #rest:elapsed:from:		ifTrue: [totalMSecs _ (60000 * arguments first) / block receiver tempo].	elapsedMSecs _ currentTime - startTime.	currentTime < startTime ifTrue: [		elapsedMSecs _ totalMSecs.	].  "clock wrap"	"If not done, then we leave stack as is and yield."	elapsedMSecs < totalMSecs ifTrue: [		readyToYield _ true.		^ self].	"Pop this command off the stack and return."	self popStackFrame.	block receiver class = MugbotSpriteMorph ifTrue:[		block receiver updateFacePosition: (block selector) args: arguments. 	].! !!ScriptableScratchMorph methodsFor: 'blocks' stamp: 'ms 5/7/2014 23:02'!defaultArgsFor: blockSpec	"Answer the default argument for the given block specification."	| defaultArgs stage sel currentSize list |	defaultArgs _ blockSpec copyFrom: 4 to: blockSpec size.  "may be empty"	stage _ self ownerThatIsA: ScratchStageMorph.	sel _ (blockSpec at: 3) asSymbol.	#gotoX:y: = sel ifTrue: [		defaultArgs _ Array			with: self referencePosition x rounded			with: self referencePosition y rounded].	#glideSecs:toX:y:elapsed:from: = sel ifTrue: [		defaultArgs _ Array			with: 1			with: self referencePosition x rounded			with: self referencePosition y rounded].	#motor:direction: = self ifTrue: [		defaultArgs _ Array with: 'reverse' localized with: 'this way' localized with: 'that way'].	#setSizeTo: = sel ifTrue: [		currentSize _ (100.0 * (self scalePoint x max: self scalePoint y)) rounded.		defaultArgs _ Array with: currentSize].	#getAttribute:of: = sel ifTrue: [		(stage _ self ownerThatIsA: ScratchStageMorph) ifNotNil: [			list _ stage submorphs select: [:m | m isKindOf: ScratchSpriteMorph].			list sort: [:s1 :s2 | s1 objName asLowercase < s2 objName asLowercase].			list size > 0				ifTrue: [defaultArgs _ Array with: 'x position' with: list first]				ifFalse: [defaultArgs _ Array with: 'background #' with: stage]]		ifNil:[defaultArgs _ Array with: 'x position' with: self]].	#concatenate:with: = sel ifTrue: [		defaultArgs _ Array with: 'hello ' localized with: 'world' localized].	#doAsk = sel ifTrue: [		defaultArgs _ Array with: 'What''s your name?' localized].	#letter:of: = sel ifTrue: [		defaultArgs _ Array with: 1 with: 'world' localized].	#stringLength: = sel ifTrue: [		defaultArgs _ Array with: 'world' localized].	#say:duration:elapsed:from: = sel ifTrue: [		defaultArgs _ Array with: 'Hello!!' localized with: 2].	#say: = sel ifTrue: [		defaultArgs _ Array with: 'Hello!!' localized].	#think:duration:elapsed:from: = sel ifTrue: [		defaultArgs _ Array with: 'Hmm...' localized with: 2].	#think: = sel ifTrue: [		defaultArgs _ Array with: 'Hmm...' localized].	(#(lookLike: showBackground:) includes: sel) ifTrue: [		defaultArgs _ Array with: self costumeNames last].	(#(playSound: doPlaySoundAndWait) includes: sel) ifTrue: [		list _ self soundNames.		defaultArgs _ list size <= 2			ifTrue: [Array with: '']			ifFalse: [Array with: (list at: (list size - 2))]].	(#(broadcast: doBroadcastAndWait) includes: sel) ifTrue: [		stage ifNotNil: [defaultArgs _ Array with: stage defaultEventName]].	(#(append:toList: deleteLine:ofList: insert:at:ofList:) includes: sel) ifTrue: [		defaultArgs size >= 1 ifTrue: [			defaultArgs at: 1 put: (defaultArgs at: 1) localized]].	(#(append:toList: deleteLine:ofList: getLine:ofList: insert:at:ofList: lineCountOfList:)		includes: sel) ifTrue: [			defaultArgs _ defaultArgs copyWith: self defaultListName].	#setLine:ofList:to: = sel ifTrue: [		defaultArgs size >= 3 ifTrue: [			defaultArgs at: 2 put: self defaultListName.			defaultArgs at: 3 put: (defaultArgs at: 3) localized]].	#appendLettersOf:toList: = sel ifTrue: [		defaultArgs size >= 2 ifTrue: [			defaultArgs at: 1 put: (defaultArgs at: 1) localized.			defaultArgs at: 2 put: self defaultListName]].	#list:contains: = sel ifTrue: [		defaultArgs size >= 2 ifTrue: [			defaultArgs at: 1 put: self defaultListName.			defaultArgs at: 2 put: (defaultArgs at: 2) localized]].	#mugbotSpeech: = sel ifTrue: [		defaultArgs _ Array with: 'I''m Mugbot!!' localized].	^ defaultArgs! !!MugbotSpriteMorph methodsFor: 'initialization' stamp: 'ms 5/1/2014 16:40'!delete	super delete.	adapter stopCommandThread.	adapter closeSocket.	(motionThread isKindOf: Process)		ifTrue: [ motionThread terminate.].	motionThread _ nil.	! !!MugbotSpriteMorph methodsFor: 'initialization' stamp: 'ms 5/4/2015 22:49'!initialize	super initialize.	faceX _ 0.	faceY _ 0.	self importMedia: (self costumePath: 'mugbot.png').	adapter isNil ifTrue:[		adapter _ MugbotSocketAdapter new.		adapter isConnected ifFalse:[			^super.		].		adapter sprite: self.	].	motionPool _ SharedQueue new.	motionLock _ false.		self startMotionThread.	self mugbotFaceReset.! !!MugbotSpriteMorph methodsFor: 'initialization' stamp: 'ms 5/7/2014 22:37'!updateFacePosition: selector args: args	| turnArg |	(selector = #mugbotSetFaceRight:) ifTrue: [		((args first) < 0) ifTrue:[			args first < -85 ifTrue:[				faceX _ 85.			] ifFalse:[				faceX _ -1 * args first.			].		] ifFalse:[			args first > 85 ifTrue:[				faceX _ -85.			] ifFalse:[				faceX _ -1 * args first.			].			].	].	(selector = #mugbotTurnFaceRight:) ifTrue: [		turnArg _ -1 * (args at:1).		(turnArg > 0) ifTrue:[			faceX + turnArg > 85 ifTrue:[				faceX _ 85.			] ifFalse:[				faceX _ faceX + turnArg.			].		] ifFalse:[			 faceX + turnArg < -85 ifTrue:[				faceX _ -85.			] ifFalse:[				faceX _ faceX + turnArg.			].			].	].	(selector = #mugbotSetFaceLeft:) ifTrue: [		((args first) < 0) ifTrue:[			args first < -85 ifTrue:[				faceX _ -85.			] ifFalse:[				faceX _ args first.			].		] ifFalse:[			args first > 85 ifTrue:[				faceX _ 85.			] ifFalse:[				faceX _ args first.			].			].	].	(selector = #mugbotTurnFaceLeft:) ifTrue: [		turnArg _ args at:1.		(turnArg > 0) ifTrue:[			faceX + turnArg > 85 ifTrue:[				faceX _ 85.			] ifFalse:[				faceX _ faceX + turnArg.			].		] ifFalse:[			 faceX + turnArg < -85 ifTrue:[				faceX _ -85.			] ifFalse:[				faceX _ faceX + turnArg.			].			].	].	(selector = #mugbotSetFaceUp:) ifTrue: [		((args first) < 0) ifTrue:[			args first < -15 ifTrue:[				faceY _ -15.			] ifFalse:[				faceY _ args first.			].		] ifFalse:[			args first > 15 ifTrue:[				faceY _ 15.			] ifFalse:[				faceY _ args first.			].			].	].	(selector = #mugbotTurnFaceUp:) ifTrue: [		(args first > 0) ifTrue:[			faceY + args first > 15 ifTrue:[				faceY _ 15.			] ifFalse:[				faceY _ faceY + args first.			].		] ifFalse:[			 faceY +  args first < -15 ifTrue:[				faceY _ -15.			] ifFalse:[				faceY _ faceY + args first.			].			].	].	(selector = #mugbotSetFaceDown:) ifTrue: [		((args first) < 0) ifTrue:[			args first < -15 ifTrue:[				faceY _ 15.			] ifFalse:[				faceY _ -1 * args first.			].		] ifFalse:[			args first > 15 ifTrue:[				faceY _ -15.			] ifFalse:[				faceY _ -1 * args first.			].			].	].	(selector = #mugbotTurnFaceDown:) ifTrue: [		(args first > 0) ifTrue:[			faceY - args first < -15 ifTrue:[				faceY _ -15.			] ifFalse:[				faceY _ faceY - args first.			].		] ifFalse:[			 faceY -  args first > 15 ifTrue:[				faceY _ 15.			] ifFalse:[				faceY _ faceY - args first.			].			].	].	(selector = #mugbotSpeech:) ifTrue: [		self say: ''	].! !!MugbotSpriteMorph methodsFor: 'accessing' stamp: 'ms 5/1/2014 16:39'!defaultImageMedia	| defaultImageMedia |	defaultImageMedia _ super defaultImageMedia.	defaultImageMedia mediaName: ('Mugbot' localized, '1').	^ defaultImageMedia.! !!MugbotSpriteMorph methodsFor: 'accessing' stamp: 'ms 5/6/2014 12:07'!faceX	^ faceX! !!MugbotSpriteMorph methodsFor: 'accessing' stamp: 'ms 5/6/2014 07:20'!faceX: x	faceX _ x.! !!MugbotSpriteMorph methodsFor: 'accessing' stamp: 'ms 5/6/2014 12:08'!faceY	^ faceY! !!MugbotSpriteMorph methodsFor: 'accessing' stamp: 'ms 5/6/2014 07:20'!faceY: y	faceY _ y.! !!MugbotSpriteMorph methodsFor: 'accessing' stamp: 'ms 5/4/2015 22:33'!getTotalMSecs: selector args: args	| secs |	(selector = #mugbotSetFaceRight:) ifTrue: [		secs _ (faceX + args first) abs * 5.		^ secs.	].	(selector = #mugbotTurnFaceRight:) ifTrue: [		secs _ (args first * 5) abs.		^ secs.	].	(selector = #mugbotSetFaceLeft:) ifTrue: [		secs _ (args first - faceX) abs * 5.		^ secs.	].	(selector = #mugbotTurnFaceLeft:) ifTrue: [		secs _ (args first * 5) abs.		^ secs.	].	(selector = #mugbotSetFaceUp:) ifTrue: [		secs _ (args first - faceY) abs * 10.		^ secs.	].	(selector = #mugbotTurnFaceUp:) ifTrue: [		secs _ (args first * 5) abs.		^ secs.	].	(selector = #mugbotSetFaceDown:) ifTrue: [		secs _ (faceY + args first) abs * 10.		^ secs.	].	(selector = #mugbotTurnFaceDown:) ifTrue: [		secs _ (args first * 5) abs.		^ secs.	].	(selector = #mugbotSpeech:) ifTrue: [		secs _ args first asString size * 90 + 1000.		^ secs.	].	(selector = #mugbotSetEyesBrightness:) ifTrue: [		secs _ 5.		^ secs.	].! !!MugbotSpriteMorph methodsFor: 'accessing' stamp: 'ms 6/20/2011 21:50'!lock	^ lock! !!MugbotSpriteMorph methodsFor: 'motion ops' stamp: 'ms 5/6/2014 07:08'!mugbotFaceReset	| command |		command _ MugbotCommand new. 	command selector: #mugbotFaceReset.	adapter send: command.! !!MugbotSpriteMorph methodsFor: 'motion ops' stamp: 'ms 5/7/2014 13:47'!mugbotSetFaceDown: deg	| args command |		command _ MugbotCommand new. 	command selector: #mugbotSetFaceDown:.	args _ Array with: (-1 * deg).	command args: args.	adapter send: command.! !!MugbotSpriteMorph methodsFor: 'motion ops' stamp: 'ms 5/6/2014 08:29'!mugbotSetFaceLeft: deg	| args command |		command _ MugbotCommand new. 	command selector: #mugbotSetFaceLeft:.	args _ Array with: deg.	command args: args.	adapter send: command.! !!MugbotSpriteMorph methodsFor: 'motion ops' stamp: 'ms 5/6/2014 16:47'!mugbotSetFaceRight: deg	| args command |		command _ MugbotCommand new. 	command selector: #mugbotSetFaceRight:.	args _ Array with: (-1 * deg).	command args: args.	adapter send: command.! !!MugbotSpriteMorph methodsFor: 'motion ops' stamp: 'ms 5/7/2014 13:30'!mugbotSetFaceUp: deg	| args command |		command _ MugbotCommand new. 	command selector: #mugbotSetFaceUp:.	args _ Array with: deg.	command args: args.	adapter send: command.! !!MugbotSpriteMorph methodsFor: 'motion ops' stamp: 'ms 5/7/2014 15:10'!mugbotSpeech: arg	| args command |		command _ MugbotCommand new. 	command selector: #mugbotSpeech:.	args _ Array with: arg.	command args: args.	self say: arg.	adapter send: command.! !!MugbotSpriteMorph methodsFor: 'motion ops' stamp: 'ms 5/7/2014 13:58'!mugbotTurnFaceDown: deg	| args command |		command _ MugbotCommand new. 	command selector: #mugbotTurnFaceDown:.	args _ Array with: (-1 * deg).	command args: args.	adapter send: command.! !!MugbotSpriteMorph methodsFor: 'motion ops' stamp: 'ms 5/7/2014 01:31'!mugbotTurnFaceLeft: deg	| args command |		command _ MugbotCommand new. 	command selector: #mugbotTurnFaceLeft:.	args _ Array with: deg.	command args: args.	adapter send: command.! !!MugbotSpriteMorph methodsFor: 'motion ops' stamp: 'ms 5/7/2014 00:53'!mugbotTurnFaceRight: deg	| args command |		command _ MugbotCommand new. 	command selector: #mugbotTurnFaceRight:.	args _ Array with: (-1 * deg).	command args: args.	adapter send: command.! !!MugbotSpriteMorph methodsFor: 'motion ops' stamp: 'ms 5/7/2014 13:37'!mugbotTurnFaceUp: deg	| args command |		command _ MugbotCommand new. 	command selector: #mugbotTurnFaceUp:.	args _ Array with: deg.	command args: args.	adapter send: command.! !!MugbotSpriteMorph methodsFor: 'object i/o' stamp: 'ms 6/20/2011 02:46'!fieldsVersion	^ 1! !!MugbotSpriteMorph methodsFor: 'object i/o' stamp: 'ms 5/7/2014 22:30'!storeFieldsOn: anObjStream	super storeFieldsOn: anObjStream.	self storeFieldsNamed: #(		"adapter"	) on: anObjStream.! !!MugbotSpriteMorph methodsFor: 'private' stamp: 'ms 5/1/2014 16:39'!costumePath: fileName	| costumeFolder |	costumeFolder _ ScratchFileChooserDialog getDefaultFolderForType: #costume.	^ costumeFolder pathName , FileDirectory slash ,'Mugbot' , FileDirectory slash , fileName.! !!MugbotSpriteMorph methodsFor: 'private' stamp: 'ms 5/7/2014 15:24'!nextInstanceName	| stage lastN digits |	(stage _ self ownerThatIsA: ScratchStageMorph) ifNil: [		^ 'Mugbot' localized asUTF8, 1 printString].	lastN _ 0.	stage sprites ifNotNil: [		stage sprites do: [:m |			(m isKindOf: MugbotSpriteMorph) ifTrue: [				digits _ m objName trailingDigits.				((digits size > 0) and: [m objName beginsWith: ('Mugbot' localized)])					ifTrue: [lastN _ lastN max: digits asNumber]]]].	^ 'Mugbot' localized asUTF8, (lastN + 1) printString! !!MugbotSpriteMorph methodsFor: 'as yet unclassified' stamp: 'ms 5/7/2014 22:29'!initFieldsFrom: anObjStream version: classVersion	super initFieldsFrom: anObjStream version: classVersion.	self initFieldsNamed: #(		"adapter"	) from: anObjStream.! !!MugbotSpriteMorph methodsFor: 'as yet unclassified' stamp: 'ms 5/4/2015 22:33'!mugbotSetEyesBrightness: brightness	| command args |	command _ MugbotCommand new. 	command selector: #mugbotSetEyesBrightness:.	args _ Array with: brightness.	command args: args.	adapter send: command.! !!MugbotSpriteMorph methodsFor: 'as yet unclassified' stamp: 'ms 6/19/2011 11:47'!resetPosition	self gotoX: 0 y: 0.	self heading: 0.! !!MugbotSpriteMorph methodsFor: 'as yet unclassified' stamp: 'ms 6/20/2011 22:05'!startMotionThread	| motion |	motionThread _ [		[			motionLock ifFalse:[			(motionPool peek) ifNotNil:[				motion _ motionPool next.				motion forkAt: Processor userBackgroundPriority.					].			].			(Delay forMilliseconds: 10 asInteger) wait.			"Transcript show: (sprite lock asString); cr."				true] whileTrue.	] newProcess.	motionThread priority: Processor userBackgroundPriority.	motionThread resume.! !!MugbotSpriteMorph class methodsFor: 'block specs' stamp: 'ms 5/8/2015 18:53'!blockSpecs	| blocks |	blocks _ #(		'motion'			('turn face right %n deg'		t	mugbotTurnFaceRight: 10)			('set face right %n deg'			t	mugbotSetFaceRight: 45)			-			('turn face left %n deg'			t	mugbotTurnFaceLeft: 10)			('set face left %n deg'			t	mugbotSetFaceLeft: 45)			-			('turn face up %n deg'			t	mugbotTurnFaceUp: 5)			('set face up %n deg'			t	mugbotSetFaceUp: 15)					-			('turn face down %n deg'		t	mugbotTurnFaceDown: 5)			('set face down %n deg'			t	mugbotSetFaceDown: 15)			--			('turn %n degrees'				-	turnRight: 15)	"icon shows turn direction"			('turn %n degrees'				-	turnLeft: 15)	"icon shows turn direction"			-			('point in direction %d'			-	heading: 90)			('point towards %m'				-	pointTowards:)			-			('go to x:%n y:%n'				-	gotoX:y: 0 0)			('go to %m'						-	gotoSpriteOrMouse:)			('glide %n secs to x:%n y:%n'	t	glideSecs:toX:y:elapsed:from: 1 50 50)			-			('change x by %n'				-	changeXposBy: 10)			('set x to %n'					-	xpos: 0)			('change y by %n'				-	changeYposBy: 10)			('set y to %n'					-	ypos: 0)			-			('if on edge, bounce'			-	bounceOffEdge)			-			('x position'						r	xpos)			('y position'						r	ypos)			('direction'						r	heading)		'looks'			('set brightness of eyes to %n'	t	mugbotSetEyesBrightness: 255)			-			('switch to costume %l'			-	lookLike:)			('next costume'					-	nextCostume)			('costume #'						r	costumeIndex)			-			('say %s for %n secs'			t	say:duration:elapsed:from: 'Hello!!' 2)			('say %s'						-	say: 'Hello!!')			('think %s for %n secs'			t	think:duration:elapsed:from: 'Hmm...' 2)			('think %s'						-	think: 'Hmm...')			-			('change %g effect by %n'		-	changeGraphicEffect:by: 'color' 25)			('set %g effect to %n'			-	setGraphicEffect:to: 'color' 0)			('clear graphic effects'			-	filterReset)			-			('change size by %n'			-	changeSizeBy:)			('set size to %n%'				-	setSizeTo: 100)			('size'							r	scale)			-			('show'							-	show)			('hide'							-	hide)			-			('go to front'					-	comeToFront)			('go back %n layers'			-	goBackByLayers: 1)		'sound'			('speech %s'						t	mugbotSpeech: 'I''m Mugbot!!')			--			('play sound %S'				-	playSound:)			('play sound %S until done'		s	doPlaySoundAndWait)			('stop all sounds'				-	stopAllSounds)			-			('play drum %D for %n beats'	t 	drum:duration:elapsed:from: 48 0.2)			('rest for %n beats'				t 	rest:elapsed:from: 0.2)			-			('play note %N for %n beats'	t	noteOn:duration:elapsed:from: 60 0.5)			('set instrument to %I'			- 	midiInstrument: 1)			-			('change volume by %n'		- 	changeVolumeBy: -10)			('set volume to %n%'			- 	setVolumeTo: 100)			('volume'						r 	volume)			-			('change tempo by %n'			- 	changeTempoBy: 20)			('set tempo to %n bpm'			- 	setTempoTo: 60)			('tempo'							r 	tempo)		'pen'			('clear'							-	clearPenTrails)			-			('pen down'						-	putPenDown)			('pen up'						-	putPenUp)			-			('set pen color to %c'			-	penColor:)			('change pen color by %n'		-	changePenHueBy:)			('set pen color to %n'			-	setPenHueTo: 0)			-			('change pen shade by %n'		-	changePenShadeBy:)			('set pen shade to %n'			-	setPenShadeTo: 50)			-			('change pen size by %n'		-	changePenSizeBy: 1)			('set pen size to %n'				-	penSize: 1)			-			('stamp'							-	stampCostume)	).	blocks _ blocks, #(		'control'			('when %m clicked'				S	-)			('when %k key pressed'			K	-)			('when %m clicked'				M	-)			-			('wait %n secs'					t	wait:elapsed:from: 1)			-			('forever'						c	doForever)			('repeat %n'						c	doRepeat 10)			-			('broadcast %e'					-	broadcast:)			('broadcast %e and wait'			s	doBroadcastAndWait)			('when I receive %e'			E	-)			-			('forever if %b'					c	doForeverIf)			('if %b'							c	doIf)			('if %b'							c	doIfElse)			('wait until %b'					s	doWaitUntil)			('repeat until %b'				c	doUntil)			-			('stop script'					s	doReturn)			('stop all'						-	stopAll)		'sensing'			('touching %m?' 				b	touching:)			('touching color %C?' 			b	touchingColor:)			('color %C is touching %C?'		b	color:sees:)			-			('ask %s and wait'				s	doAsk 'What''s your name?')			('answer'						r	answer)			-			('mouse x'						r	mouseX)			('mouse y'						r	mouseY)			('mouse down?'					b	mousePressed)			-			('key %k pressed?'				b	keyPressed: 'space')			-			('distance to %m'				r	distanceTo:)			-			('reset timer'					-	timerReset)			('timer'							r	timer)			-			('%a of %m'						r	getAttribute:of:)			-			('loudness'						r	soundLevel)			('loud?'							b	isLoud)			~			('%H sensor value'				r	sensor: 'slider')			('sensor %h?'					b	sensorPressed: 'button pressed')		'operators'			('%n + %n'						r	+ - -)			('%n - %n'						r	- - -)			('%n * %n'						r	* - -)			('%n / %n'						r	/ - -)			-			('pick random %n to %n'		r	randomFrom:to: 1 10)			-			('%s < %s'						b	< '' '')			('%s = %s'						b	= '' '')			('%s > %s'						b	> '' '')			-			('%b and %b'					b	&)			('%b or %b'						b	|)			('not %b'						b	not)			-			('join %s %s'					r	concatenate:with: 'hello ' 'world')			('letter %n of %s'				r	letter:of: 1 'world')			('length of %s'					r	stringLength: 'world')			-			('%n mod %n'					r	\\ - -)			('round %n'						r	rounded -)			-			('%f of %n'						r	computeFunction:of: 'sqrt' 10)		'variables'			('show variable %v'				-	showVariable:)			('hide variable %v'				-	hideVariable:)		'list'			('add %s to %L'					-	append:toList: 'thing')			-			('delete %y of %L'				-	deleteLine:ofList: 1)			('insert %s at %i of %L'			-	insert:at:ofList: 'thing' 1)			('replace item %i of %L with %s'		-	setLine:ofList:to: 1 'list' 'thing')			-			('item %i of %L'					r	getLine:ofList: 1)			('length of %L'					r	lineCountOfList:)			('%L contains %s'				b	list:contains: 'list' 'thing')	).	^ blocks, super blockSpecs! !!ScratchStageMorph methodsFor: 'accessing' stamp: 'ee 11/12/2007 14:12'!defaultImageMedia	^ ImageMedia new		form: DefaultBackgroundForm;		mediaName: ('background' localized, '1')! !!ScratchStageMorph methodsFor: 'event handling' stamp: 'ms 5/1/2014 16:32'!createNewMugbotSprite	| frame morph |	(frame _ self ownerThatIsA: ScratchFrameMorph) ifNil: [^ self].	morph _ MugbotSpriteMorph new.	frame addAndView: morph.! !!ScratchStageMorph methodsFor: 'menus' stamp: 'ms 5/1/2014 16:32'!rightButtonMenu	"Present the right button menu."	| menu |	menu _ CustomMenu new.	menu add: 'grab screen region for new sprite' action: #grabSpriteFromScreen.	menu addLine.	menu add: 'save picture of stage...' action: #stageShot.	menu addLine.	menu add: 'create new Mugbot sprite' action: #createNewMugbotSprite.	menu localize; invokeOn: self.! !!SequenceableCollection methodsFor: '*JSON-writing' stamp: 'tonyg 8/17/2005 00:40'!jsonWriteOn: aStream	| needComma |	needComma := false.	aStream nextPut: $[.	self do: [:v |		needComma			ifTrue: [ aStream nextPutAll: ', ' ]			ifFalse: [ needComma := true ].		v jsonWriteOn: aStream.	].	aStream nextPut: $].! !!String methodsFor: '*JSON-writing' stamp: 'tonyg 8/17/2005 16:21'!jsonWriteOn: aStream	| replacement |	aStream nextPut: $".	self do: [:ch |		replacement _ Json escapeForCharacter: ch.		replacement			ifNil: [ aStream nextPut: ch ]			ifNotNil: [ aStream nextPut: $\; nextPut: replacement ].	].	aStream nextPut: $".! !!True methodsFor: '*JSON-writing' stamp: 'tonyg 8/17/2005 00:44'!jsonWriteOn: aStream	aStream nextPutAll: 'true'! !!UndefinedObject methodsFor: '*JSON-writing' stamp: 'tonyg 8/17/2005 00:45'!jsonWriteOn: aWriteStream 	aWriteStream nextPutAll: 'null'! !ScratchFrameMorph initialize!Morph subclass: #ScratchFrameMorph	instanceVariableNames: 'topPane viewerPane scriptsPane stageFrame workPane titlePane libraryPane menuPanel stageButtonsPanel readoutPane logoMorph projectTitleMorph flagButton fillScreenFlag paintingInProgress projectDirectory projectName projectInfo author loginName loginPassword watcherPositions shuffledCostumeNames justSaved viewModeButtons viewMode lastViewMode viewModeButtonsPanel toolbarPanel lastWeDoPoll '	classVariableNames: 'AppName Build Clipboard DefaultNotes DefaultSprite Fonts FontsXO IsXO ScratchServers ScratchSkin ScratchSkinXO TakeOverScreen UseErrorCatcher Version VersionDate VisibleDrives WorkpaneExtent '	poolDictionaries: ''	category: 'Scratch-UI-Panes'!Json initialize!"Postscript:Smalltalk garbageCollect.Smalltalk cleanOutUndeclared.Smalltalk unimplemented.ScratchFrameMorph initFonts.Preferences restoreDefaultFonts.ScratchFrameMorph isXO: false.ScratchTranslator resetUITranslationSet.ScratchTranslator resetMIDITranslationSet.ScratchFrameMorph putInClipboard: nil.Utilities clearAuthorInfo.TranscriptStream allInstances do: [:t | t on: (String new: 1000)].ScriptableScratchMorph buildBlockSpecDictionary.ScratchTranslator setLanguage: 'ja'.PaintFrame clearColorPickers.SystemWindow clearTopWindow.HandMorph clearPasteBuffer.Smalltalk reclaimDependents.Smalltalk forgetDoIts.Smalltalk removeEmptyMessageCategories.Symbol rehash.Smalltalk garbageCollect.ObjStream initialize.ScratchFrameMorph appName: 'Mugbot Action Designer'.ScratchFrameMorph version: '1.0'.ScratchFrameMorph build: '<build:2015050801>'.ScratchFrameMorph initializeMugbotLogo."!